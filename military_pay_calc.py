#Dictionary of montly salary
monthly_pay_rates = {"O1": ['3,107.70', '3,234.90', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20', '3,910.20'],
"O2": ['3,580.50', '4,077.90', '4,696.20', '4,854.90', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10', '4,955.10'],
"O3": ['4,143.90', '4,697.10', '5,069.70', '5,527.80', '5,793.00', '6,083.40', '6,271.20', '6,580.20', '6,741.60', '6,741.60', '6,741.60', '6,741.60', '6,741.60', '6,741.60', '6,741.60', '6,741.60', '6,741.60', '6,741.60', '6,741.60', '6,741.60', '6,741.60', '6,741.60'],
"O4": ['4,713.00', '5,455.50', '5,820.00', '5,900.70', '6,238.50', '6,601.20', '7,052.70', '7,403.70', '7,647.60', '7,788.00', '7,869.30', '7,869.30', '7,869.30', '7,869.30', '7,869.30', '7,869.30', '7,869.30', '7,869.30', '7,869.30', '7,869.30', '7,869.30', '7,869.30'],
"O5": ['5,462.40', '6,153.60', '6,579.00', '6,659.40', '6,925.50', '7,084.20', '7,434.00', '7,690.80', '8,022.30', '8,529.60', '8,770.50', '9,009.30', '9,280.20', '9,280.20', '9,280.20', '9,280.20', '9,280.20', '9,280.20', '9,280.20', '9,280.20', '9,280.20', '9,280.20'],
"O6": ['6,552.30', '7,198.50', '7,671.00', '7,671.00', '7,700.40', '8,030.40', '8,073.90', '8,073.90', '8,532.60', '9,343.80', '9,819.90', '10,295.70', '10,566.60', '10,841.10', '11,372.40', '11,372.40', '11,599.80', '11,599.80', '11,599.80', '11,599.80', '11,599.80', '11,599.80'],
"O7": ['8,640.60', '9,041.70', '9,227.70', '9,375.30', '9,642.60', '9,906.90', '10,212.30', '10,516.80', '10,822.20', '11,781.90', '12,591.90', '12,591.90', '12,591.90', '12,591.90', '12,656.40', '12,656.40', '12,909.60', '12,909.60', '12,909.60', '12,909.60', '12,909.60', '12,909.60'],
"O8": ['10,398.60', '10,739.40', '10,965.60', '11,028.60', '11,310.90', '11,781.90', '11,891.40', '12,339.00', '12,467.40', '12,852.90', '13,410.90', '13,925.10', '14,268.30', '14,268.30', '14,268.30', '14,268.30', '14,625.60', '14,625.60', '14,991.00', '14,991.00', '14,991.00', '14,991.00']
}

def calculatepay(rank, year, yearly = False):
    ''' Fetches paygrade salary data from monthly_pay_rates dictionary

    Correlates rank key with years in service to pull monthly salary data from monthly_pay_rates
    dictionary. Will return monthly or yearly base salary information for a soldiers rank and time in
    service.
    Args:
        rank: is the monthly_pay_rates key and a string that corresponds to a soldiers paygrade
        year: an integer that corresponds to soldiers time in service
        yearly: determines if calculatepay should return monthly or yearly base pay
    Returns:
        A dict that is mapped with a Bi-Weekly, Monthly, and Yearly key with a corresponding
        salary. For Example:
        {'Bi-Weekly': '$3,526.35', 'Monthly': '$7,052.70', 'Yearly': '$84,632.40'}
    '''
    try:
        if year < 2:
            index = 0
        elif year == 2:
            index = 1
        elif year ==3:
            index = 2     
        elif year % 2 == 0:
            index = (year // 2) + 1
        elif year % 2 != 0:
            year -= 1
            index = (year // 2) + 1
        monthly_salary = float(monthly_pay_rates[rank][index].replace(',', ''))
        
        return {"Bi-Weekly": '${:,.2f}'.format(monthly_salary/2) , "Monthly": '${:,.2f}'.format
        (monthly_salary), "Yearly":  '${:,.2f}'.format(monthly_salary * 12)}
    except:
        return "An error occured"

print(calculatepay("O4", 10, True))